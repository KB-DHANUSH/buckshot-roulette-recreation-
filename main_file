import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

public class NEWROLLET {
    int rounds[] = new int[10];
    Random rand = new Random();
    int current = 0;
    int p1_life;
    int p2_life;
    int total_rounds;
    int p1_wins;
    int p2_wins;
    JLabel turnLabel;
    JLabel statusLabel;
    JLabel lives_count;
    JLabel rounds_count;
    JLabel wins_count;
    JButton self;
    JButton other;
    JButton restart;
    Font customFont;
    boolean isP1Turn;

    NEWROLLET() {
        // Use built-in font
        customFont = new Font("Monospaced", Font.BOLD, 14);

        // Frame creation
        JFrame frame = new JFrame("Buckshot Roulette");
        frame.setLayout(new BorderLayout());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(450, 250, 400, 350); // Increased height to accommodate the wins label
        frame.getContentPane().setBackground(Color.BLACK);

        // Create and initialize the rounds for gun
        generateRounds();

        // Initializing the lives, count, and wins
        p1_life = 3;
        p2_life = 3;
        total_rounds = 10;
        p1_wins = 0;
        p2_wins = 0;

        // Creating self shoot and shoot other person buttons
        self = new JButton("Self-Shoot");
        other = new JButton("Shoot-Other");
        restart = new JButton("RESTART");

        // Apply built-in font to buttons
        self.setFont(customFont);
        other.setFont(customFont);
        restart.setFont(customFont);

        // Add color to buttons
        self.setBackground(Color.RED);
        other.setBackground(Color.RED);
        restart.setBackground(Color.RED);

        // Add text color to buttons
        self.setForeground(Color.WHITE);
        other.setForeground(Color.WHITE);
        restart.setForeground(Color.WHITE);

        // Adding action listeners to the buttons
        self.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                shoot(false);
            }
        });
        other.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                shoot(true);
            }
        });
        restart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                restart();
            }
        });

        // Middle panel for displaying game status and action options
        JPanel middlePanel = new JPanel();
        middlePanel.setLayout(new GridLayout(3, 1));
        middlePanel.setBackground(Color.BLACK);

        // Label to show which player's turn it is
        turnLabel = new JLabel("Player 1's Turn", JLabel.CENTER);
        turnLabel.setFont(customFont);
        turnLabel.setForeground(Color.WHITE);

        // Label to show the action options
        JLabel actionLabel = new JLabel("Shoot yourself or the other person", JLabel.CENTER);
        actionLabel.setFont(customFont);
        actionLabel.setForeground(Color.WHITE);

        // Label to show game status messages
        statusLabel = new JLabel("", JLabel.CENTER);
        statusLabel.setFont(customFont);
        statusLabel.setForeground(Color.WHITE);

        // Adding labels to middle panel
        middlePanel.add(turnLabel);
        middlePanel.add(actionLabel);
        middlePanel.add(statusLabel);

        // Button panel
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(1, 3));
        buttonPanel.add(self);
        buttonPanel.add(other);
        buttonPanel.add(restart);

        // Create and apply built-in font to lives, count, and wins labels
        lives_count = new JLabel("Lives left - Player 1: " + p1_life + " Player 2: " + p2_life, JLabel.CENTER);
        rounds_count = new JLabel("No of Shoots Left: " + total_rounds, JLabel.CENTER);
        wins_count = new JLabel("Wins - Player 1: " + p1_wins + " Player 2: " + p2_wins, JLabel.CENTER);
        lives_count.setFont(customFont);
        lives_count.setForeground(Color.WHITE);
        rounds_count.setFont(customFont);
        rounds_count.setForeground(Color.WHITE);
        wins_count.setFont(customFont);
        wins_count.setForeground(Color.WHITE);

        // Lives panel
        JPanel livesPanel = new JPanel();
        livesPanel.setLayout(new GridLayout(3, 1));
        livesPanel.setBackground(Color.BLACK);
        livesPanel.add(wins_count);
        livesPanel.add(lives_count);
        livesPanel.add(rounds_count);

        // Adding components to the frame
        frame.add(livesPanel, BorderLayout.NORTH);
        frame.add(middlePanel, BorderLayout.CENTER);
        frame.add(buttonPanel, BorderLayout.SOUTH);

        // Visibility of frame
        frame.setVisible(true);

        // Initial player turn
        isP1Turn = true;
    }

    private void generateRounds() {
        for (int i = 0; i < 10; i++) {
            rounds[i] = rand.nextInt(2);
        }
    }

    public void shoot(Boolean isShootingOther) {
        if (total_rounds <= 0) {
            statusLabel.setText("No more rounds left.");
            return;
        }

        boolean isBlank = rounds[current] == 0;
        boolean isSelfShoot = !isShootingOther;

        if (isShootingOther) {
            // Shooting the other player
            if (rounds[current] == 1) {
                statusLabel.setText((isP1Turn ? "Player 1" : "Player 2") + " shot the other person!");
                if (isP1Turn) {
                    p2_life--;
                } else {
                    p1_life--;
                }
            } else {
                statusLabel.setText("Opponent is safe; it was a blank.");
            }
            // Switch turns after shooting the other player
            isP1Turn = !isP1Turn;
        } else {
            // Self-shooting
            if (rounds[current] == 1) {
                statusLabel.setText((isP1Turn ? "Player 1" : "Player 2") + " shot themselves!");
                if (isP1Turn) {
                    p1_life--;
                } else {
                    p2_life--;
                }

                // If it was a blank, give the player another chance
                if (isBlank) {
                    lives_count.setText("Lives left - Player 1: " + p1_life + " Player 2: " + p2_life);
                    rounds_count.setText("No of Shoots Left: " + total_rounds);
                    // Do not switch turns
                    return;
                }
            } else {
                statusLabel.setText("You are safe; it was empty.");
            }

            // Switch turns after a non-blank self-shot
            isP1Turn = !isP1Turn;
        }

        // Update lives and rounds information
        total_rounds--;
        lives_count.setText("Lives left - Player 1: " + p1_life + " Player 2: " + p2_life);
        rounds_count.setText("No of Shoots Left: " + total_rounds);

        // Check for game over conditions
        if (p1_life <= 0) {
            statusLabel.setText("Game Over! Player 2 Wins!");
            p2_wins++; // Increment Player 2's win count
            wins_count.setText("Wins - Player 1: " + p1_wins + " Player 2: " + p2_wins); // Update win count display
            disableGameButtons();
        } else if (p2_life <= 0) {
            statusLabel.setText("Game Over! Player 1 Wins!");
            p1_wins++; // Increment Player 1's win count
            wins_count.setText("Wins - Player 1: " + p1_wins + " Player 2: " + p2_wins); // Update win count display
            disableGameButtons();
        } else if (total_rounds <= 0) {
            statusLabel.setText("Game Over! No more rounds left.");
            disableGameButtons();
        } else {
            // Increment current and wrap around if necessary
            current = (current + 1) % rounds.length;
            turnLabel.setText((isP1Turn ? "Player 1's Turn" : "Player 2's Turn"));
        }
    }

    public void restart() {
        p1_life = 3;
        p2_life = 3;
        total_rounds = 10;
        generateRounds(); // Re-generate rounds for a new game
        lives_count.setText("Lives left - Player 1: " + p1_life + " Player 2: " + p2_life);
        rounds_count.setText("No of Shoots Left: " + total_rounds);
        turnLabel.setText("Player 1's Turn"); // Reset game status text
        statusLabel.setText("Shoot yourself or the other person"); // Reset status text
        enableGameButtons(); // Re-enable buttons if they were disabled
        isP1Turn = true; // Reset to Player 1's turn
    }

    private void disableGameButtons() {
        self.setEnabled(false);
        other.setEnabled(false);
    }

    private void enableGameButtons() {
        self.setEnabled(true);
        other.setEnabled(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new NEWROLLET();
            }
        });
    }
}
