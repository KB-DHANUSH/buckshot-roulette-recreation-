import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

public class NEWROLLET {
    int rounds[] = new int[10];
    Random rand = new Random();
    int current = 0;
    int p1_life;
    int p2_life;
    int total_rounds;
    int p1_wins;
    int p2_wins;
    JLabel turnLabel;
    JLabel statusLabel;
    JLabel livesCountLabel;
    JLabel roundsCountLabel;
    JLabel winsCountLabel;
    JButton selfShootButton;
    JButton shootOtherButton;
    JButton restartButton;
    Font customFont;
    Font headingFont;
    boolean isP1Turn;

    NEWROLLET() {
        // Custom fonts
        customFont = new Font("Arial", Font.BOLD, 16);
        headingFont = new Font("Arial", Font.BOLD, 20);

        // Frame creation
        JFrame frame = new JFrame("Buckshot Roulette");
        frame.setLayout(new BorderLayout());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(450, 250, 500, 400);

        // Set background color to black
        frame.getContentPane().setBackground(Color.BLACK);

        // Create and initialize the rounds for gun
        generateRounds();

        // Initializing the lives, count, and wins
        p1_life = 3;
        p2_life = 3;
        total_rounds = 10;
        p1_wins = 0;
        p2_wins = 0;

        // Creating buttons
        selfShootButton = new JButton("Self-Shoot");
        shootOtherButton = new JButton("Shoot Other");
        restartButton = new JButton("Restart");

        // Apply custom font and colors to buttons
        selfShootButton.setFont(customFont);
        shootOtherButton.setFont(customFont);
        restartButton.setFont(customFont);

        selfShootButton.setBackground(new Color(255, 69, 58)); // Red
        shootOtherButton.setBackground(new Color(255, 69, 58)); // Red
        restartButton.setBackground(new Color(0, 204, 102)); // Green

        selfShootButton.setForeground(Color.WHITE);
        shootOtherButton.setForeground(Color.WHITE);
        restartButton.setForeground(Color.WHITE);

        // Adding action listeners to the buttons
        selfShootButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                shoot(false);
            }
        });
        shootOtherButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                shoot(true);
            }
        });
        restartButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                restart();
            }
        });

        // Middle panel for displaying game status and action options
        JPanel middlePanel = new JPanel();
        middlePanel.setLayout(new GridLayout(3, 1));
        middlePanel.setOpaque(false);

        // Label to show which player's turn it is
        turnLabel = new JLabel("Player 1's Turn", JLabel.CENTER);
        turnLabel.setFont(headingFont);
        turnLabel.setForeground(Color.WHITE);

        // Label to show the action options
        JLabel actionLabel = new JLabel("Shoot yourself or the other person", JLabel.CENTER);
        actionLabel.setFont(customFont);
        actionLabel.setForeground(Color.WHITE);

        // Label to show game status messages
        statusLabel = new JLabel("", JLabel.CENTER);
        statusLabel.setFont(customFont);
        statusLabel.setForeground(Color.WHITE);

        // Adding labels to middle panel
        middlePanel.add(turnLabel);
        middlePanel.add(actionLabel);
        middlePanel.add(statusLabel);

        // Button panel
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(1, 3));
        buttonPanel.setOpaque(false);
        buttonPanel.add(selfShootButton);
        buttonPanel.add(shootOtherButton);
        buttonPanel.add(restartButton);

        // Create and apply custom font to lives, count, and wins labels
        livesCountLabel = new JLabel("Lives Left - Player 1: " + p1_life + " | Player 2: " + p2_life, JLabel.CENTER);
        roundsCountLabel = new JLabel("Shoots Left: " + total_rounds, JLabel.CENTER);
        winsCountLabel = new JLabel("Wins - Player 1: " + p1_wins + " | Player 2: " + p2_wins, JLabel.CENTER);
        livesCountLabel.setFont(customFont);
        livesCountLabel.setForeground(Color.WHITE);
        roundsCountLabel.setFont(customFont);
        roundsCountLabel.setForeground(Color.WHITE);
        winsCountLabel.setFont(customFont);
        winsCountLabel.setForeground(Color.WHITE);

        // Lives panel
        JPanel livesPanel = new JPanel();
        livesPanel.setLayout(new GridLayout(3, 1));
        livesPanel.setOpaque(false);
        livesPanel.add(winsCountLabel);
        livesPanel.add(livesCountLabel);
        livesPanel.add(roundsCountLabel);

        // Adding components to the frame
        frame.add(livesPanel, BorderLayout.NORTH);
        frame.add(middlePanel, BorderLayout.CENTER);
        frame.add(buttonPanel, BorderLayout.SOUTH);

        // Visibility of frame
        frame.setVisible(true);

        // Initial player turn
        isP1Turn = true;
    }

    private void generateRounds() {
        for (int i = 0; i < 10; i++) {
            rounds[i] = rand.nextInt(2);
        }
    }

    public void shoot(Boolean isShootingOther) {
        if (total_rounds <= 0) {
            statusLabel.setText("No more rounds left.");
            return;
        }

        boolean isBlank = rounds[current] == 0;
        boolean isSelfShoot = !isShootingOther;

        if (isShootingOther) {
            // Shooting the other player
            if (rounds[current] == 1) {
                statusLabel.setText((isP1Turn ? "Player 1" : "Player 2") + " shot the other person!");
                if (isP1Turn) {
                    p2_life--;
                } else {
                    p1_life--;
                }
            } else {
                statusLabel.setText("Opponent is safe; it was a blank.");
            }
            // Switch turns after shooting the other player
            isP1Turn = !isP1Turn;
        } else {
            // Self-shooting
            if (rounds[current] == 1) {
                statusLabel.setText((isP1Turn ? "Player 1" : "Player 2") + " shot themselves!");
                if (isP1Turn) {
                    p1_life--;
                } else {
                    p2_life--;
                }
            } else {
                statusLabel.setText("You are safe; it was empty.");
            }

            // Switch turns after a non-blank self-shot
            isP1Turn = !isP1Turn;
        }

        // Update lives and rounds information
        total_rounds--;
        livesCountLabel.setText("Lives Left - Player 1: " + p1_life + " | Player 2: " + p2_life);
        roundsCountLabel.setText("Shoots Left: " + total_rounds);

        // Check for game over conditions
        if (p1_life <= 0) {
            statusLabel.setText("Game Over! Player 2 Wins!");
            p2_wins++;
            winsCountLabel.setText("Wins - Player 1: " + p1_wins + " | Player 2: " + p2_wins);
            disableGameButtons();
        } else if (p2_life <= 0) {
            statusLabel.setText("Game Over! Player 1 Wins!");
            p1_wins++;
            winsCountLabel.setText("Wins - Player 1: " + p1_wins + " | Player 2: " + p2_wins);
            disableGameButtons();
        } else if (total_rounds <= 0) {
            statusLabel.setText("Game Over! No more rounds left.");
            disableGameButtons();
        } else {
            // Increment current and wrap around if necessary
            current = (current + 1) % rounds.length;
            turnLabel.setText((isP1Turn ? "Player 1's Turn" : "Player 2's Turn"));
        }

        // Trigger screen flash and glitch effect if not a blank
        if (!isBlank) {
            triggerFlashAndGlitch();
        }
    }

    private void triggerFlashAndGlitch() {
        final JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(turnLabel);

        // Duration for the flash effect
        final int flashDuration = 200; // milliseconds
        final int flashInterval = 50; // milliseconds

        // Flash screen white
        Timer flashTimer = new Timer(flashInterval, new ActionListener() {
            private boolean white = false;
            private int elapsedTime = 0;

            @Override
            public void actionPerformed(ActionEvent e) {
                if (elapsedTime >= flashDuration) {
                    ((Timer) e.getSource()).stop();
                    frame.getContentPane().setBackground(Color.BLACK); // Reset to black after flashing
                    return;
                }
                if (white) {
                    frame.getContentPane().setBackground(Color.WHITE);
                } else {
                    frame.getContentPane().setBackground(Color.BLACK);
                }
                white = !white;
                elapsedTime += flashInterval;
            }
        });
        flashTimer.setRepeats(true);
        flashTimer.start();

        // Shake text labels with glitch effect
        final int shakeAmount = 20; // Increased shake amount
        final int shakeDuration = 500; // milliseconds
        final int interval = 10; // milliseconds

        Timer shakeTimer = new Timer(interval, new ActionListener() {
            int elapsed = 0;
            boolean movingRight = true;

            @Override
            public void actionPerformed(ActionEvent e) {
                if (elapsed >= shakeDuration) {
                    ((Timer) e.getSource()).stop();
                    // Reset all text positions
                    statusLabel.setLocation(statusLabel.getX(), statusLabel.getY());
                    turnLabel.setLocation(turnLabel.getX(), turnLabel.getY());
                    livesCountLabel.setLocation(livesCountLabel.getX(), livesCountLabel.getY());
                    roundsCountLabel.setLocation(roundsCountLabel.getX(), roundsCountLabel.getY());
                    winsCountLabel.setLocation(winsCountLabel.getX(), winsCountLabel.getY());
                    return;
                }

                int shakeOffset = movingRight ? shakeAmount : -shakeAmount;
                statusLabel.setLocation(statusLabel.getX() + shakeOffset, statusLabel.getY());
                turnLabel.setLocation(turnLabel.getX() + shakeOffset, turnLabel.getY());
                livesCountLabel.setLocation(livesCountLabel.getX() + shakeOffset, livesCountLabel.getY());
                roundsCountLabel.setLocation(roundsCountLabel.getX() + shakeOffset, roundsCountLabel.getY());
                winsCountLabel.setLocation(winsCountLabel.getX() + shakeOffset, winsCountLabel.getY());
                movingRight = !movingRight;
                elapsed += interval;
            }
        });
        shakeTimer.start();
    }

    private void restart() {
        p1_life = 3;
        p2_life = 3;
        total_rounds = 10;
        p1_wins = 0;
        p2_wins = 0;
        current = 0;
        isP1Turn = true;

        livesCountLabel.setText("Lives Left - Player 1: " + p1_life + " | Player 2: " + p2_life);
        roundsCountLabel.setText("Shoots Left: " + total_rounds);
        winsCountLabel.setText("Wins - Player 1: " + p1_wins + " | Player 2: " + p2_wins);
        statusLabel.setText("");
        turnLabel.setText("Player 1's Turn");

        enableGameButtons();
    }

    private void disableGameButtons() {
        selfShootButton.setEnabled(false);
        shootOtherButton.setEnabled(false);
    }

    private void enableGameButtons() {
        selfShootButton.setEnabled(true);
        shootOtherButton.setEnabled(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new NEWROLLET());
    }
}
